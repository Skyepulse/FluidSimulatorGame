#version 430

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D density;
layout(rgba32f, binding = 4) uniform image2D imgOutput;

layout(std430, binding = 1) buffer Particles {
	vec2 particles[];
};

layout(std430, binding = 2) buffer ParticlesInd {
	uvec4 particleindex[]; // Acceed with key
};

layout(std430, binding = 3) buffer LevelInfos {
	vec2 densTexSize;
	uint particleCount;
	uint densityZoomFactor;
	uint backgroundZoomFactor;
};

const ivec2 offsets2D[9] =
{
	ivec2(-1, 1),
	ivec2(0, 1),
	ivec2(1, 1),
	ivec2(-1, 0),
	ivec2(0, 0),
	ivec2(1, 0),
	ivec2(-1, -1),
	ivec2(0, -1),
	ivec2(1, -1),
};

float sqrdDist(vec2 a, vec2 b)
{
    vec2 c = a - b;
    return dot(c, c);
}

void main()
{
	vec2 pixel_pos = gl_GlobalInvocationID.xy; // pos in background tex space
	ivec2 pixel = ivec2(pixel_pos);

	vec2 pos = pixel_pos / float(backgroundZoomFactor); // pos in density tex space
	ivec2 cell = pixel / int(backgroundZoomFactor);

	ivec2 n1 = cell;
	ivec2 n2 = cell + ivec2( 1, 0);
	ivec2 n3 = cell + ivec2( 0, 1);
	ivec2 n4 = cell + ivec2( 1, 1);

	vec4 c1 = imageLoad(density, n1);
	vec4 c2 = imageLoad(density, n2);
	vec4 c3 = imageLoad(density, n3);
	vec4 c4 = imageLoad(density, n4);

	vec4 a1 = sqrdDist(vec2(n1), pos) * c1;
	vec4 a2 = sqrdDist(vec2(n2), pos) * c2;
	vec4 a3 = sqrdDist(vec2(n3), pos) * c3;
	vec4 a4 = sqrdDist(vec2(n4), pos) * c4;

    imageStore(imgOutput, pixel, (a1 + a2 + a3 + a4) * 0.25);
}