#version 430

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout(std430, binding = 1) buffer Particles {
	vec2 particles[];
};

layout(std430, binding = 2) buffer ParticlesInd {
	uvec4 particleindex[]; // Acceed with key
};

layout(std430, binding = 3) buffer LevelInfos {
	vec4 BaseColor;
	vec2 densTexSize;
	uint particleCount;
	uint densityZoomFactor;
	float lowDensityThreshold;
};

// From Sebastian Lague https://github.com/SebLague/Fluid-Sim/blob/main/Assets/Scripts/Sim%202D/Compute/SpatialHash.hlsl
// Constants used for hashing
const uint hashK1 = 15823;
const uint hashK2 = 9737333;

// Hash cell coordinate to a single unsigned integer
uint Hash2D(ivec2 pixel)
{
	uvec2 cell = uvec2(pixel);
	uint a = cell.x * hashK1;
	uint b = cell.y * hashK2;
	return (a + b);
}

uint KeyFromHash(uint hash, uint tableSize)
{
	return hash % tableSize;
}

void main() {
	ivec2 x = ivec2(gl_GlobalInvocationID.xy);

	// Compute the index corresponding to the compute shader invocation
	uint index = uint(x.x * 32*32 + x.y);

	// Return if the index is out of bound
	if(index >= particleCount)
		return;

	// Compute the position in the texture space
	vec2 pos = particles[index] * float(densityZoomFactor);

	// Compute the nearest_pixel position
	ivec2 nearest_pixel = ivec2(pos);

	// Compute the hash of the pixel
	uint hash = Hash2D(nearest_pixel);
	uint key = KeyFromHash(hash, particleCount);

	// Stores the pixel index into the spatial hashmap
	// Atomic add because accessed in parallel
	uint count = atomicAdd(particleindex[key].x, 1);

	if(count == 0)
		atomicExchange(particleindex[key].y, index);
	else if(count == 1)
		atomicExchange(particleindex[key].z, index);
	else if(count == 2){
		atomicExchange(particleindex[key].w, index);
	}
	// Used for debugging
	//imageStore(imgOutput, nearest_pixel, vec4(0.0, 0.0, 1.0, 1.0));
}